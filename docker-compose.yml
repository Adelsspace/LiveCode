services:
  postgres:
    image: postgres:17.4
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: hh-dev
      POSTGRES_PASSWORD: dev-password
      POSTGRES_DB: bloksh-db
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U hh-dev -d bloksh-db'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  code-backend:
    image: code-backend
    container_name: bloksh-backend
    restart: always
    ports:
      - "8080:8080"
#      - "9092:9092"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bloksh-db
      SPRING_DATASOURCE_USERNAME: hh-dev
      SPRING_DATASOURCE_PASSWORD: dev-password
      SOCKETIO_PROTOCOL: ws
      LLM_KEY: ${LLM_KEY:-no-key}
      SOCKETIO_BROADCAST_DEBUG: true
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:29092
      KAFKA_GROUP_ID: "instance-1"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - internal

  code-frontend:
    build:
      context: ./frontend
    container_name: bloksh-frontend
    restart: always
    networks:
      - internal

  nginx:
    image: nginx:1.27
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - code-backend
      - code-frontend
    networks:
      - internal

  liquibase:
    image: liquibase/liquibase:4.27
    container_name: liquibase-cli
    depends_on:
      - postgres
    volumes:
      - ./backend/src/main/resources/db/changelog:/liquibase/changelog:ro
    environment:
      - LIQUIBASE_COMMAND_URL=jdbc:postgresql://postgres:5432/bloksh-db
      - LIQUIBASE_COMMAND_USERNAME=hh-dev
      - LIQUIBASE_COMMAND_PASSWORD=dev-password
      - LIQUIBASE_COMMAND_CHANGELOG_FILE=db.changelog-master.yaml
    working_dir: /liquibase/changelog
    networks:
      - internal

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: always
    ports:
      - "29092:29092"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092, CONTROLLER://0.0.0.0:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      CLUSTER_ID: "j9Nu3X14TjiPGiEVovU8jQ"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - internal

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9090:9090"
    depends_on:
      - kafka
    environment:
      - SERVER_PORT=9090
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
    restart: always
    networks:
      - internal

networks:
  internal:

volumes:
  pgdata:
  kafka-data:
