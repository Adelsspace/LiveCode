spring.application.name=blokshnote
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
springdoc.swagger-ui.path=/openapi_docs
spring.liquibase.enabled=true

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost/blokshnotedb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:admin}

socketio.protocol=${SOCKETIO_PROTOCOL:ws}
socketio.host=0.0.0.0
socketio.host-frontend=${HOST_FRONTEND:localhost}
socketio.port=${SOCKETIO_PORT:9092}

spring.ai.deepseek.api-key=${LLM_KEY:no-key}
spring.ai.deepseek.chat.options.model=deepseek-chat
spring.ai.deepseek.chat.options.temperature=0.5

spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP-SERVERS:localhost:29092}

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.acks=all
spring.kafka.producer.properties.spring.json.add.type.headers=true
spring.kafka.producer.properties.retries=5
spring.kafka.producer.properties.retry.backoff.ms=1000
