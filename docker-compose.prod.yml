services:
  postgres:
    image: postgres:17.4
    restart: unless-stopped
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  code-backend:
    image: ghcr.io/mishablin/bloksh-backend:latest
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SOCKETIO_PROTOCOL: wss
      LLM_KEY: ${LLM_KEY:-no-key}
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:29092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
    networks:
      - internal

  code-frontend:
    image: ghcr.io/mishablin/bloksh-frontend:latest
    restart: unless-stopped
    depends_on:
      - code-backend
    networks:
      - internal

  nginx:
    image: nginx:1.27
    restart: unless-stopped
    ports:
      - "${NGINX_HTTPS_PORT:-443}:443"
      - "80:80"
    volumes:
      - ${NGINX_CONFIG:-./nginx/prod.conf}:/etc/nginx/conf.d/default.conf:ro
      - ${SSL_CERT_PATH:-/etc/letsencrypt/live/notbadcode.com/fullchain.pem}:/etc/letsencrypt/live/notbadcode.com/fullchain.pem:ro
      - ${SSL_KEY_PATH:-/etc/letsencrypt/live/notbadcode.com/privkey.pem}:/etc/letsencrypt/live/notbadcode.com/privkey.pem:ro
    depends_on:
      - code-backend
      - code-frontend
    networks:
      - internal

  liquibase:
    image: liquibase/liquibase:4.27
    container_name: liquibase-cli
    depends_on:
      - postgres
    volumes:
      - ./changelog:/liquibase/changelog:ro
    environment:
      - LIQUIBASE_COMMAND_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - LIQUIBASE_COMMAND_USERNAME=${POSTGRES_USER}
      - LIQUIBASE_COMMAND_PASSWORD=${POSTGRES_PASSWORD}
      - LIQUIBASE_COMMAND_CHANGELOG_FILE=db.changelog-master.yaml
    working_dir: /liquibase/changelog
    networks:
      - internal

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: always
    ports:
      - "29092:29092"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "29092" ]
      interval: 10s
      timeout: 3s
      retries: 5
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092, CONTROLLER://0.0.0.0:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      CLUSTER_ID: "j9Nu3X14TjiPGiEVovU8jQ"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - internal

  init-kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    restart: on-failure
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic websocket-messages --replication-factor 1 --partitions 2

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - internal

networks:
  internal:

volumes:
  pgdata:
  kafka-data:
